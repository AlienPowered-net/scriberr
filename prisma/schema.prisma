generator client {
  provider      = "prisma-client-js"
  // Vercel sometimes runs on rhel-based images.
  binaryTargets = ["debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // use pooled URL at runtime
  directUrl = env("DIRECT_URL")     // use primary for migrations
}

model Shop {
  id        String   @id @default(cuid())
  domain    String   @unique           // e.g. dev-alienpowered.myshopify.com
  installedAt DateTime @default(now())

  folders   Folder[]
  notes     Note[]
  customMentions CustomMention[]
  createdAt DateTime @default(now())
}

model Folder {
  id        String   @id @default(cuid())
  shopId    String
  name      String
  icon      String   @default("folder")
  iconColor String   @default("#f57c00")
  position  Int      @default(0)
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@unique([shopId, name]) // names unique per shop (optional)
}

model Note {
  id        String    @id @default(cuid())
  shopId    String
  folderId  String?
  title     String
  content   String    @db.Text
  tags      String[]  @default([])
  pinnedAt  DateTime?
  createdAt DateTime  @default(now())
  shop      Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  folder    Folder?   @relation(fields: [folderId], references: [id])
  versions  NoteVersion[]
  updatedAt DateTime  @updatedAt
  @@index([shopId, folderId, updatedAt])
}

model NoteVersion {
  id          String   @id @default(cuid())
  noteId      String
  title       String
  content     String   @db.Text
  versionTitle String? // User-defined title for the version
  snapshot    Json?    // Tiptap editor state snapshot for comparison
  isAuto      Boolean  @default(false) // Whether this is an auto-generated version
  createdAt   DateTime @default(now())
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  
  @@index([noteId, createdAt])
}

model Session {
  id              String   @id                              // "offline_<shop>" or online session id
  shop            String
  state           String
  isOnline        Boolean
  scope           String?
  expires         DateTime?
  accessToken     String?

  // Fields used for online sessions (nullable for offline)
  userId          BigInt?  @db.BigInt
  firstName       String?
  lastName        String?
  email           String?
  accountOwner    Boolean? @default(false)
  locale          String?
  collaborator    Boolean? @default(false)
  emailVerified   Boolean? @default(false)

  // Raw payload info for online tokens
  onlineAccessInfo Json?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([shop])
  @@map("session")
}

model CustomMention {
  id        String   @id @default(cuid())
  shopId    String
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}
